<div style="float: left">
    <div class="well">Signup test</div>
    <form class="form-horizontal" data-action="signup">
        <div class="control-group">
            <label class="control-label" for="Email">Email</label>
            <div class="controls">
                <input type="text" id="Email" placeholder="enter your Email here" name="Email">
            </div>
        </div>
        <div class="control-group">
            <label class="control-label" for="Password">Password</label>
            <div class="controls">
                <input type="text" id="Password" placeholder="enter your Password here" name="Password">
            </div>
        </div>
        <div class="control-group">
            <div class="controls">
                <button type="submit" class="btn">Submit</button>
            </div>
        </div>
    </form>
</div>
<div style="float: left">
    <div class="well">Login test</div>
    <form class="form-horizontal" data-action="login">
        <div class="control-group">
            <label class="control-label" for="Username">Username</label>
            <div class="controls">
                <input type="text" id="Username" placeholder="enter your Email here" name="Username">
            </div>
        </div>
        <div class="control-group">
            <label class="control-label" for="Password1">Password</label>
            <div class="controls">
                <input type="text" id="Password1" placeholder="enter your Password here" name="Password">
            </div>
        </div>
        <div class="control-group">
            <div class="controls">
                <button type="submit" class="btn">Submit</button>
            </div>
        </div>
    </form>
</div>
<div style="float: left">
    <div class="well">Logout test</div>
    <form class="form-horizontal" data-action="logout">
        <div class="control-group">
            <label class="control-label" for="Token">Token</label>
            <div class="controls">
                <input type="text" id="Token" placeholder="User token to logout" name="Token">
            </div>
        </div>
        <div class="control-group">
            <div class="controls">
                <button type="submit" class="btn">Submit</button>
            </div>
        </div>
    </form>
</div>
<div class="clearfix"></div>
<br/>

<h4>Request</h4>
<pre id="request">
</pre>
<h4>Results</h4>
<pre id="results">
</pre>

@section scripts {
    <script>
        $(function () {
            var $ul = $('#results');
            var $request = $('#request');

            $('.btn').click(function (e) {
                e.preventDefault();

                var $form = $(this).parents('form:first');
                var reqJson = $form.serializeObject();

                $request.html(syntaxHighlight(JSON.stringify(reqJson, null, 4)));
                $ul.text('processing request...');

                // uncoment url to change api implementation
                var request = $.ajax({
                    //url: "/api/v5/user/" + $form.attr('data-action'),
                    url: "/api1/v5/user1/" + $form.attr('data-action'),
                    type: "POST",
                    data: $form.serialize(),
                    dataType: "json"
                });

                request.done(function (results) {
                    $ul.html(syntaxHighlight(JSON.stringify(results, null, 4)));
                });

                request.fail(function (jqXHR, textStatus) {
                    alert("Request failed: " + textStatus);
                });
            });
        });


        // just some formating helpers
        $.fn.serializeObject = function () {
            var o = {};
            var a = this.serializeArray();
            $.each(a, function () {
                if (o[this.name] !== undefined) {
                    if (!o[this.name].push) {
                        o[this.name] = [o[this.name]];
                    }
                    o[this.name].push(this.value || '');
                } else {
                    o[this.name] = this.value || '';
                }
            });
            return o;
        };
        function syntaxHighlight(json) {
            if (typeof json != 'string') {
                json = JSON.stringify(json, undefined, 2);
            }
            json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
            return json.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g, function (match) {
                var cls = 'number';
                if (/^"/.test(match)) {
                    if (/:$/.test(match)) {
                        cls = 'key';
                    } else {
                        cls = 'string';
                    }
                } else if (/true|false/.test(match)) {
                    cls = 'boolean';
                } else if (/null/.test(match)) {
                    cls = 'null';
                }
                return '<span class="' + cls + '">' + match + '</span>';
            });
        }


    </script>
}